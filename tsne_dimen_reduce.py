#from sklearn.manifold import TSNE
#import time
#import seaborn as sns



# %% [code]
#time_start = time.time()
#sns.scatterplot(x="tsne-2d-one", y="tsne-2d-two",
                #hue="masterCategory",
                #data=df,
                #legend="full",
                #alpha=0.8)

# %% [markdown]
# You can see different clusters generated by embeddings, which reinforces that features make sense. In this image above it is possible to observe the separation by Category, and in more detail by subcategory.
# 
# Of course there is actually a lot more information in embeddings, the visualization is for general understanding only

# %% [code]
#plt.figure(figsize=(16,10))
#sns.scatterplot(x="tsne-2d-one", y="tsne-2d-two",
               # hue="subCategory",
               # data=df,
               # legend="full",
                ##alpha=0.8)

# %% [markdown]
# ## Conclusion
# 
# Convolutional networks can be used to generate generic embeddings of any content. These embeddings can be used to identify similar items and in a recommendation process.
# 
# A big improvement would be to retrain some network layers in a dataset similar to the one that will be used. So the network learns better features for a specific problem.

# %% [code]
#df.sample(10).to_csv('df_sample.csv')
#df_embs.to_csv('embeddings.csv')
#df.to_csv('metadados.csv')